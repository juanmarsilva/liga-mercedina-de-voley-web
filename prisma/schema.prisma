// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para los usuarios de la aplicaci√≥n.
model User {
  id        Int      @id @default(autoincrement()) 
  username  String   @unique 
  password  String   
  role      Role     @default(ADMIN) 
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 
}

enum Role {
  USER
  ADMIN
}

model News {
  id            Int      @id @default(autoincrement()) 
  title         String
  description   String
  status        NewsStatus @default(ACTIVE)
  imageUrl      String?
  createdAt     DateTime @default(now()) 
  updatedAt     DateTime @updatedAt 
}

enum NewsStatus {
  ACTIVE
  DESACTIVE
}

model Team {
  id          Int      @id @default(autoincrement())
  description String
  gender      Gender
  level       LeagueLevels    @relation(fields: [levelId], references: [id])
  levelId     Int
  players     Player[]
  matchesA    Match[] @relation(name: "TeamA")
  matchesB    Match[] @relation(name: "TeamB")
}

enum Gender {
  FEMENINO
  MASCULINO
}

model LeagueLevels {
  id          Int      @id @default(autoincrement())
  description String   @unique
  teams       Team[]
}

model Player {
  id              Int      @id @default(autoincrement())
  fullname        String
  dni             String   @unique
  birthDate       DateTime
  gender          Gender
  team            Team   @relation(fields: [teamId], references: [id])
  teamId          Int
}

model Match {
  id              Int            @id @default(autoincrement())
  matchDate       DateTime
  matchHour       DateTime
  status          MatchStatus
  
  teamA           Team         @relation(name: "TeamA", fields: [teamAId], references: [id])
  teamAId         Int

  teamB           Team         @relation(name: "TeamB", fields: [teamBId], references: [id])
  teamBId         Int

  setResults      SetResult[]
}

enum MatchStatus {
  PENDING
  FINISHED
  DELETED
}

model SetResult {
  id            Int      @id @default(autoincrement())
  match         Match    @relation(fields: [matchId], references: [id])
  matchId       Int
  setNumber     Set
  scoreTeamA    Int
  scoreTeamB    Int
}

enum Set {
  FIRST_SET
  SECOND_SET
  THIRD_SET
}

model LeagueFrequentQuestion {
  id                  Int      @id @default(autoincrement())
  question_title      String
  question_response   String
}